/**
 * @param {number[]} A
 * @return {number[]}
 */
var prevPermOpt1 = function(A) {
  for (let i = A.length - 2; i>=0;i--) {
    let max = -1;
    for (let j = i+1;j<A.length;j++) {
      if (A[i] > A[j] && (max === -1 || A[j] >= A[max])) {
        max = j;
      }
    }
    if (max >= 0) {
      const temp = A[i];
      A[i] = A[max];
      A[max] = temp;
      return A;
    }
  }
  return A;
};

it('1053', () => {
  expect(prevPermOpt1([3,2,1])).toEqual([3,1,2]);
  expect(prevPermOpt1([1,1,5])).toEqual([1,1,5]);
  expect(prevPermOpt1([1,9,4,6,7])).toEqual([1,7,4,6,9]);
  expect(prevPermOpt1([3,1,1,3])).toEqual([1,1,3,3]);
  expect(prevPermOpt1([6,1,5,9,1,1,9,7,7,9,7,6,2,7,3,4,5,1,7,6,3,5,3,1,4,7,1,1,8,8,9,1,9,5,1,6,5,4,7,3,2,7,4,9,7,6,2,5,7,4,3,7,5,5,4,4,2,1,3,1,6,4,8,7,5,9,3,1,4,4,7,5,3,7,2,4,4,8,5,4,8,1,1,3,4,3,5,4,8,1,5,4,9,8,4,5,3,1,1,3])).toEqual([6,1,5,9,1,1,9,7,7,9,7,6,2,7,3,4,5,1,7,6,3,5,3,1,4,7,1,1,8,8,9,1,9,5,1,6,5,4,7,3,2,7,4,9,7,6,2,5,7,4,3,7,5,5,4,4,2,1,3,1,6,4,8,7,5,9,3,1,4,4,7,5,3,7,2,4,4,8,5,4,8,1,1,3,4,3,5,4,8,1,5,4,9,8,4,5,1,1,3,3]);
})